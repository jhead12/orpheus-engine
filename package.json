{
  "name": "orpheus-engine",
  "version": "1.0.9",
  "description": "Digital Audio Workstation",
  "main": "electron/main.js",
  "private": true,
  "productName": "Orpheus Engine",
  "workspaces": [
    "workstation/*"
  ],
  "build": {
    "appId": "com.orpheus.engine",
    "productName": "Orpheus Engine",
    "directories": {
      "output": "dist"
    },
    "icon": "assets/icons/icon.png"
  },
  "dependencies": {
    "@mui/material": "^7.1.0",
    "@types/lodash": "^4.17.17",
    "axios": "1.9.0",
    "concurrently": "^8.2.2",
    "path": "^0.12.7",
    "react-resize-detector": "^12.0.2",
    "web3.db-fileconnector": "^1.8.4"
  },
  "scripts": {
    "setup-python": "node scripts/setup-python.js",
    "postinstall": "npm run setup-python",
    "install-all": "yarn run fix-permissions && yarn run clean && node scripts/install-all.js",
    "install-all:force": "yarn run fix-permissions && rm -rf */node_modules && node scripts/install-all.js --force",
    "start": "npm run start:electron",
    "start:electron": "npm run build:electron && electron electron/main.js",
    "start:integrated": "npm run start:electron",
    "start:separate": "npm run typecheck && concurrently \"npm run start:backend\" \"npm run start:frontend\" \"npm run start:daw\"",
    "dev": "concurrently \"npm run start:backend\" \"npm run start:daw\"",
    "start:frontend": "cd workstation/frontend && BACKEND_PORT=5000 npm start",
    "setup:daw": "sudo apt-get update && sudo apt-get install -y dbus-x11 xvfb curl && chmod +x scripts/*.sh",
    "start:daw": "sudo -E bash scripts/start-electron.sh --no-sandbox",
    "start:daw:local": "cd workstation/frontend && DAW_PORT=3000 npm run dev",
    "start:daw:headless": "sudo -E bash scripts/start-electron.sh --no-sandbox",
    "start:backend": "node scripts/start-backend-smart.js",
    "start:backend:direct": "cd workstation/backend && BACKEND_PORT=5000 DEVELOPMENT=true python main.py",
    "start:backend:prod": "cd workstation/backend && BACKEND_PORT=5000 DEVELOPMENT=false python main.py",
    "start:monitor-backend": "cd workstation/backend && FLASK_APP=monitor_api.py FLASK_ENV=development python -m flask run --port 8000",
    "install-backend-deps": "pip install -r workstation/backend/requirements.txt",
    "build": "cd workstation/frontend && npm install && NODE_OPTIONS=--openssl-legacy-provider npm run build",
    "build:electron": "tsc electron/*.ts --outDir electron --target es2020 --module commonjs --moduleResolution node --esModuleInterop --allowSyntheticDefaultImports --skipLibCheck",
    "build-all": "npm run build:electron && npm run build --workspace=workstation/frontend && npm run build --workspace=workstation/backend",
    "test": "npm run test:frontend || echo 'Tests skipped'",
    "test:frontend": "cd workstation/frontend && npm test",
    "test:frontend:watch": "cd workstation/frontend && npm run test:watch",
    "test:daw": "cd workstation/frontend && npm test -- --dir src/components/daw",
    "test:audio": "cd workstation/frontend && npm test -- --dir src/services/audio",
    "test:coverage": "cd workstation/frontend && npm test -- --coverage",
    "test:clip-manipulation": "cd workstation/frontend && npm test -- src/components/daw/ClipManipulation.test.tsx",
    "test:audio-export": "cd workstation/frontend && npm test -- src/components/daw/AudioExport.test.tsx",
    "test:file-operations": "cd workstation/frontend && npm test -- src/components/daw/ProjectFileOperations.test.tsx",
    "lint": "npm run lint:frontend --fix",
    "clean": "echo 'Cleaning workspace...' && rm -rf node_modules yarn.lock && rm -rf workstation/frontend/node_modules workstation/frontend/yarn.lock && rm -rf workstation/backend/node_modules workstation/backend/yarn.lock && echo 'Installing dependencies...' && yarn install",
    "clean-only": "echo 'Cleaning workspace (no reinstall)...' && rm -rf node_modules yarn.lock && rm -rf workstation/frontend/node_modules workstation/frontend/yarn.lock && rm -rf workstation/backend/node_modules workstation/backend/yarn.lock && echo 'Cleanup complete. Run yarn install to reinstall.'",
    "lint:frontend": "echo 'Linting frontend via build process...' && cd workstation/frontend && NODE_OPTIONS=--openssl-legacy-provider npm run build",
    "validate": "npm run test && npm run lint",
    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "release:patch": "npm run release:prepare && npm run version:patch && npm run branch:release && npm run github:release",
    "release:minor": "npm run release:prepare && npm run version:minor && npm run branch:release && npm run github:release",
    "release:major": "npm run release:prepare && npm run version:major && npm run branch:release && npm run github:release",
    "run-from-subdir": "node -e \"console.log('Running script from root directory: ' + process.argv[1]); require('child_process').spawnSync('npm', ['run', process.argv[1]], {stdio: 'inherit', cwd: '/workspaces/orpheus-engine'});\"",
    "release:prepare": "git checkout main && git pull origin main && git merge develop",
    "version:patch": "npm run validate && npm run changelog && npm version patch --no-git-tag-version -m 'chore(release): %s' && git add package.json && git commit -m \"chore(release): v$npm_package_version\" && git tag -a \"v$npm_package_version\" -m \"Release v$npm_package_version\" && git push && git push origin \"v$npm_package_version\"",
    "version:minor": "npm run validate && npm run changelog && npm version minor --no-git-tag-version -m 'chore(release): %s' && git add package.json && git commit -m \"chore(release): v$npm_package_version\" && git tag -a \"v$npm_package_version\" -m \"Release v$npm_package_version\" && git push && git push origin \"v$npm_package_version\"",
    "version:major": "(npm run validate || true) && npm run changelog && npm version major --no-git-tag-version -m 'chore(release): %s' && git add package.json && git commit -m \"chore(release): v$npm_package_version\" && git tag -a \"v$npm_package_version\" -m \"Release v$npm_package_version\" && git push && git push origin \"v$npm_package_version\"",
    "sync-versions": "node scripts/sync-versions.js",
    "postversion": "npm run sync-versions",
    "permissions": "find . -type f -name '*.sh' -exec chmod +x {} \\;",
    "branch:feature": "git checkout develop && git checkout -b feature/$npm_config_name",
    "branch:hotfix": "git checkout main && git checkout -b hotfix/$npm_config_name",
    "branch:cleanup": "git branch --merged | grep -v '\\*\\|main\\|develop' | xargs -r git branch -d",
    "branch:release": "git branch | grep -q \"release/v$npm_package_version\" && echo \"Branch release/v$npm_package_version already exists\" || git checkout -b release/v$npm_package_version",
    "github:release": "gh release create v$npm_package_version --title \"Release v$npm_package_version\" --notes \"$(cat CHANGELOG.md | sed -n \"/^## \\[$npm_package_version\\]/,/^## /p\" | sed '$ d')\" || echo \"Could not create release. Make sure gh CLI is installed and authenticated.\"",
    "typecheck": "tsc --noEmit",
    "prestart": "npm run system-check && npm run typecheck",
    "update-submodules": "node scripts/update-submodules.js",
    "setup-symlinks": "node scripts/setup-symlinks.js",
    "presync-versions": "npm run setup-symlinks",
    "prebuild": "npm run setup-symlinks",
    "fix-permissions": "sudo chown -R $(id -u):$(id -g) \"$HOME/.npm\" || true",
    "start:vite": "cd workstation/frontend && npm run dev",
    "fix-ipfs": "node scripts/fix-ipfs-dependency.js",
    "fix-sentence-transformers": "node scripts/fix-sentence-transformers.js",
    "fix-vite": "node scripts/install-vite-deps.js",
    "fix-electron-path": "bash scripts/fix-start-electron.sh",
    "auto-sync": "node scripts/auto-sync-version.js",
    "system-check": "node scripts/system-check.js",
    "fix-python-deps": "node scripts/fix-python-deps.js && npm run install-backend-deps",
    "health-check": "npm run system-check",
    "doctor": "npm run fix-python-deps && npm run system-check",
    "verify-mcp": "python3 -c \"import mcp; print('✅ MCP package is working')\" && python3 -c \"import google.protobuf; print(f'✅ Protobuf version: {google.protobuf.__version__}')\"",
    "clear-ports": "node scripts/clear-ports.js",
    "clear-ports:all": "node scripts/clear-ports.js all",
    "clear-ports:help": "node scripts/clear-ports.js help",
    "ports:clear": "npm run clear-ports",
    "ports:kill": "npm run clear-ports all",
    "install-ffmpeg": "node scripts/install-ffmpeg.js",
    "backup": "node scripts/create-backup.js",
    "backup:workstation": "node scripts/create-backup.js workstation",
    "backup:oew": "node scripts/create-backup.js OEW-main",
    "fix-maps-dependency": "node scripts/fix-maps-dependency.js"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.52",
    "@types/react": "^19.1.6",
    "@types/react-dom": "^19.1.5",
    "conventional-changelog-cli": "^4.1.0",
    "electron": "^36.3.2",
    "hoopy": "^0.1.4",
    "jest-runtime": "^30.0.0-beta.3",
    "sharp": "^0.34.2",
    "typescript": "^5.8.3"
  },
  "resolutions": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=7.0.0"
  }
}
