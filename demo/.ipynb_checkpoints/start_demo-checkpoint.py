#!/usr/bin/env python3
"""
Orpheus Audio Analysis MLflow Demo
HP AI Studio Competition Entry

This script sets up and runs the MLflow tracking server for the audio analysis demo.
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path

def setup_mlflow_environment():
    """Set up MLflow environment and directories."""
    demo_dir = Path(__file__).parent
    mlruns_dir = demo_dir / "mlruns"
    artifacts_dir = demo_dir / "artifacts"
    
    # Create directories
    mlruns_dir.mkdir(exist_ok=True)
    artifacts_dir.mkdir(exist_ok=True)
    
    # Set environment variables
    os.environ["MLFLOW_TRACKING_URI"] = f"file://{mlruns_dir}"
    os.environ["MLFLOW_DEFAULT_ARTIFACT_ROOT"] = f"file://{artifacts_dir}"
    
    return mlruns_dir, artifacts_dir

def start_mlflow_server(mlruns_dir, port=5000):
    """Start MLflow tracking server."""
    cmd = [
        sys.executable, "-m", "mlflow", "ui",
        "--backend-store-uri", f"file://{mlruns_dir}",
        "--host", "0.0.0.0",
        "--port", str(port)
    ]
    
    print(f"Starting MLflow server on port {port}...")
    print(f"Command: {' '.join(cmd)}")
    
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Give the server time to start
        time.sleep(3)
        
        # Check if the process is still running
        if process.poll() is None:
            print(f"‚úÖ MLflow server started successfully!")
            print(f"üìä MLflow UI: http://localhost:{port}")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Failed to start MLflow server")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error starting MLflow server: {e}")
        return None

def start_demo_frontend():
    """Start the demo frontend application."""
    demo_dir = Path(__file__).parent / "audio-analysis-demo"
    
    if not demo_dir.exists():
        print(f"‚ùå Demo directory not found: {demo_dir}")
        return None
    
    print("Installing frontend dependencies...")
    install_cmd = ["npm", "install"]
    try:
        subprocess.run(install_cmd, cwd=demo_dir, check=True)
        print("‚úÖ Dependencies installed successfully!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        return None
    
    print("Starting demo frontend...")
    start_cmd = ["npm", "run", "dev"]
    
    try:
        process = subprocess.Popen(start_cmd, cwd=demo_dir)
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Demo frontend started successfully!")
            print("üéµ Demo App: http://localhost:3001")
            return process
        else:
            print("‚ùå Failed to start demo frontend")
            return None
            
    except Exception as e:
        print(f"‚ùå Error starting demo frontend: {e}")
        return None

def create_sample_experiment():
    """Create a sample MLflow experiment for demonstration."""
    try:
        import mlflow
        
        # Set up experiment
        experiment_name = "orpheus-audio-analysis-demo"
        experiment = mlflow.set_experiment(experiment_name)
        
        with mlflow.start_run():
            # Log sample parameters
            mlflow.log_param("demo_mode", "true")
            mlflow.log_param("audio_format", "webm")
            mlflow.log_param("analysis_engine", "orpheus-ai")
            
            # Log sample metrics
            mlflow.log_metric("demo_quality_score", 95.5)
            mlflow.log_metric("demo_tempo", 128.0)
            mlflow.log_metric("demo_energy", 0.85)
            
            # Create a sample artifact
            sample_report = """# Orpheus Audio Analysis Demo Report

## System Information
- Engine: Orpheus AI Audio Analysis
- Version: 1.0.0
- Competition: HP AI Studio

## Capabilities Demonstrated
- Real-time audio recording
- Spectral analysis and FFT processing
- AI-powered genre classification
- Professional audio quality assessment
- MLflow experiment tracking

## Technical Features
- WebRTC audio capture
- Advanced signal processing
- Machine learning inference
- Professional audio standards compliance

Generated by Orpheus Engine Demo System
"""
            
            with open("demo_report.md", "w") as f:
                f.write(sample_report)
            
            mlflow.log_artifact("demo_report.md")
            os.remove("demo_report.md")
            
        print(f"‚úÖ Sample experiment created: {experiment_name}")
        
    except ImportError:
        print("‚ö†Ô∏è  MLflow not available for Python integration")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not create sample experiment: {e}")

def main():
    """Main demo startup function."""
    print("üéµ Orpheus Audio Analysis Demo - HP AI Studio Competition")
    print("=" * 60)
    
    # Setup MLflow environment
    mlruns_dir, artifacts_dir = setup_mlflow_environment()
    print(f"üìÅ MLflow data directory: {mlruns_dir}")
    print(f"üìÅ Artifacts directory: {artifacts_dir}")
    
    # Create sample experiment
    create_sample_experiment()
    
    # Start MLflow server
    mlflow_process = start_mlflow_server(mlruns_dir)
    
    # Start demo frontend
    frontend_process = start_demo_frontend()
    
    if mlflow_process and frontend_process:
        print("\nüöÄ Demo is now running!")
        print("=" * 40)
        print("üéµ Audio Analysis Demo: http://localhost:3001")
        print("üìä MLflow Tracking UI:  http://localhost:5000")
        print("=" * 40)
        print("\nPress Ctrl+C to stop all services...")
        
        # Open browser tabs
        try:
            time.sleep(2)
            webbrowser.open("http://localhost:3001")
            time.sleep(1)
            webbrowser.open("http://localhost:5000")
        except:
            pass
        
        try:
            # Keep the script running
            while True:
                time.sleep(1)
                
                # Check if processes are still running
                if mlflow_process.poll() is not None:
                    print("‚ùå MLflow server stopped unexpectedly")
                    break
                    
                if frontend_process.poll() is not None:
                    print("‚ùå Frontend server stopped unexpectedly")
                    break
                    
        except KeyboardInterrupt:
            print("\nüõë Shutting down demo services...")
            
            if mlflow_process:
                mlflow_process.terminate()
                mlflow_process.wait()
                print("‚úÖ MLflow server stopped")
                
            if frontend_process:
                frontend_process.terminate()
                frontend_process.wait()
                print("‚úÖ Frontend server stopped")
                
            print("üëã Demo shutdown complete!")
    else:
        print("‚ùå Failed to start demo services")
        sys.exit(1)

if __name__ == "__main__":
    main()
